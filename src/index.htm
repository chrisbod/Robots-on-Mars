<!doctype html>
<html>
	<head>
	<script src="grid.js"></script>
	<script src="robot.js"></script>
	<script>
	function RobotsOnMars() {}
	RobotsOnMars.prototype.createGrid = function robotsOnMars_createGrid(gridDefinition) {
		this.definitionString = gridDefinition;
		this.definitionArray = gridDefinition.split(" ");
		this.grid = new RemoteGrid(+this.definitionArray[0],+this.definitionArray[1]);
		this.grid.setBoundaries(50,50);
		this.robots = [];
		this.lostRobots = [];
		return this;
	}
	//Properties
	RobotsOnMars.prototype.definitionString = "";
	RobotsOnMars.prototype.definitionArray = void (Array) || null;
	RobotsOnMars.prototype.grid = void (RemoteGrid) || null;
	RobotsOnMars.prototype.robots = void (Array(Robot)) || null;
	
	
	//Methods
	RobotsOnMars.prototype.insertRobot = function robotsOnMars_insertRobot(robotDefinition) {
		var robotDefinitionArray = robotDefinition.split(" "),
			robot = new Robot(+robotDefinitionArray[0],+robotDefinitionArray[1],robotDefinitionArray[2]);
		robot.onMoveForward = this.getRobotOnMoveForwardHandler();
		robot.onProcessInstructionEnd = this.getRobotOnProcessInstructionEndHandler();
		this.robots.push(robot);
	}
	RobotsOnMars.prototype.getRobotOnMoveForwardHandler = function robotsOnMars_getRobotOnMoveForwardHandler() {
		var robotsOnMars = this;
		return function robotsOnMars_getRobotOnMoveForwardHandler_Closure() {
			//this event handler is totally useless
			//should probably have reread the document properly
			
		}
	}
	RobotsOnMars.prototype.getRobotOnProcessInstructionEndHandler = function robotsOnMars_getRobotOnProcessInstructionEndHandler() {
		var robotsOnMars = this;
		return function robotsOnMars_getRobotOnProcessInstructionEndHandler_Closure() {
			robotsOnMars.buildOutputFromRobot(this);
		}
	}
	RobotsOnMars.prototype.buildOutputFromRobot = function robots_buildOutputFromRobot(robot) {
		this.lastOutput = robot.coordinate.x+" "+robot.coordinate.y+" "+robot.orientation;
		if (!this.grid.hasPosition(robot.coordinate.x,robot.coordinate.y)) {
			this.lastOutput += " LOST"
		}
	
	}
	RobotsOnMars.prototype.instructRobot = function robotsOnMars_instructRobot(instruction) {
		if (instruction.length >= 100){//validate here as there is no reason for robots to care about how long their instructions are
		//ALSO see Issue #3
			throw "Illegal instruction length for a robotsOnMars Robot";
		}
		//for the moment a robot instruction will ALWAYS go to the newest robot;
		var robot = this.robots[this.robots.length-1];
		robot.processInstruction(instruction);
	}
	RobotsOnMars.prototype.getOutput = function robotsOnMars_getOutput() {
		return this.lastOutput;
	}
	RobotsOnMars.prototype.renderOutput = function robotsOnMars_renderOutput() {
		alert(this.lastOutput);
	}
	
	
	

	
	
	</script>
	<script>


window.onerror = function (error) {//now that is lazy
	alert(error);
}
	var robotsOnMars = new RobotsOnMars();
robotsOnMars.createGrid("5 3"); //things are better when you pay attention

//putting back in grid testing (a bit sneaky to have it here as it really is a 'unit' test for grids not robotsOnMars)
//over doing it a bit but logged as Issue #1;

if (!robotsOnMars.grid.hasPosition(0,0) || robotsOnMars.grid.hasPosition(6,4)) {
	throw "robots on mars grid is not sized correctly";
}

robotsOnMars.insertRobot("1 1 E");
robotsOnMars.instructRobot("RFRFRFRF"); //I'll never really get into chaining properly

if (robotsOnMars.getOutput()!="1 1 E") {
	throw "Unexpected result [1 1 E,RFRFRFRF]->"+robotsOnMars.getOutput();
}
robotsOnMars.renderOutput();

robotsOnMars
	.insertRobot("3 2 N");
//check that we have a 'clean state' now that a new robot is in play
if (robotsOnMars.getOutput()) {
	throw "Inserted new robot but output is not clean ("+robotsOnMars.getOutput()+")";
}

robotsOnMars.instructRobot("FRRFLLFFRRFLL")

if (robotsOnMars.getOutput()!="3 3 N LOST") {
	throw "Unexpected result [3 2 N,FRRFLLFFRRFLL]->"+robotsOnMars.getOutput();
}
robotsOnMars.renderOutput();
robotsOnMars
	.insertRobot("0 3 W")
	.instructRobot("LLFFFLFLFL")
if (robotsOnMars.getOutput()!="2 3 S") {
	throw "Unexpected result [0 3 W,LLFFFLFLFL]->"+robotsOnMars.getOutput();
}
robotsOnMars.renderOutput()




	

	</script>
	<style>
	fieldset, div {
		float: left;
		clear: both;
	}
		label {
			display: block;
		}
	
	</style>
	</head>
	<body>
		<form>
		<fieldset>
			<legend>Robots On Mars</legend>
			<div>
			<label>
				Grid size (e.g "10 10"): <input name="gridsize">
			</label>
			<input type="reset">
			</div>
			<fieldset>
				<label>
					New Robot Position: <input name="robotposition">
				</label>
				<label>
					Robot Instructions: <input name="robotinstructions">
				<label>
				<input type="submit" value="Insert and Instruct">
			</fieldset>
			<label>Output: </label>
			<textarea name="output" style="height: 10em"></textarea>
			
		</fieldset>
		</form>
	
	</body>



</html>